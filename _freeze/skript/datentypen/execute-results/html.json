{
  "hash": "2206f1a3b7956e8fc283be0622e9bb88",
  "result": {
    "engine": "jupyter",
    "markdown": "# Datentypen verstehen\n\n## Lernziele dieses Kapitels\n\nAm Ende dieses Kapitels können Sie:\n\n- die wichtigsten Datentypen unterscheiden,\n- mit Zahlen und Texten rechnen bzw. arbeiten,\n- einfache Berechnungen und Ausgaben erstellen.\n\n## Einleitung\n\nIn Python gibt es verschiedene **Datentypen**. Diese beschreiben, \n**welche Art von Daten** Sie in Variablen speichern. Das ist wichtig, weil \nviele Operationen – wie zum Beispiel `+` – je nach Datentyp etwas anderes bedeuten:\n\n- `+` bei Zahlen bedeutet **Addition**,\n- `+` bei Text bedeutet **Zusammenfügen** (Konkatenation).\n\nBevor wir also mit komplexeren Programmen arbeiten, sollten wir verstehen, \nwelche Datentypen es gibt und wie man mit ihnen umgeht.\n\n## Die wichtigsten Datentypen\n\nHier sind die grundlegenden Datentypen in Python:\n\n| Typ | Beispiel | Bedeutung |\n|-----|----------|-----------|\n| `int` | `10` | Ganze Zahl |\n| `float` | `3.14` | Kommazahl |\n| `str` | `\"Hallo\"` | Text (String) |\n| `bool` | `True`, `False` | Wahrheitswert (Ja/Nein) |\n\nSie können den Typ einer Variable mit der Funktion `type()` herausfinden:\n\n::: {#405b1e8a .cell execution_count=1}\n``` {.python .cell-code}\nwert = 42\nprint(type(wert))  # Ausgabe: <class 'int'>\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'int'>\n```\n:::\n:::\n\n\n## Unterschiede zwischen `int` und `float`\n\nIn Python unterscheidet man zwischen **ganzen Zahlen** (`int`) und **Kommazahlen** (`float`):\n\n- `int` steht für „integer“ – also ganze Zahlen wie `1`, `0`, `-10`\n- `float` steht für „floating point number“ – also Zahlen mit Dezimalstellen wie `3.14`, `0.5`, `-2.0`\n\n::: {#952c423e .cell execution_count=2}\n``` {.python .cell-code}\na = 10       # int\nb = 2.5      # float\n\nprint(\"a:\", a, \"| Typ:\", type(a))\nprint(\"b:\", b, \"| Typ:\", type(b))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\na: 10 | Typ: <class 'int'>\nb: 2.5 | Typ: <class 'float'>\n```\n:::\n:::\n\n\n::: {.callout-important icon=\"false\" collapse=\"false\"}\nDie Unterscheidung ist wichtig: Manche Rechenoperationen verhalten sich je nach Datentyp leicht unterschiedlich.\n:::\n\n## Was sind Booleans (`bool`)?\n\nEin **Boolean** ist ein Wahrheitswert: Er kann nur zwei Zustände annehmen:\n\n- `True` (wahr)\n- `False` (falsch)\n\nSolche Werte begegnen uns zum Beispiel bei Fragen wie:\n\n- Ist die Temperatur über 30 °C?\n- Hat die Datei einen bestimmten Namen?\n- Ist die Liste leer?\n\n::: {#2f5f47d7 .cell execution_count=3}\n``` {.python .cell-code}\nist_sonnig = True\nhat_regenschirm = False\n\nprint(\"Sonnig:\", ist_sonnig)\nprint(\"Regenschirm dabei?\", hat_regenschirm)\nprint(\"Typ von 'ist_sonnig':\", type(ist_sonnig))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSonnig: True\nRegenschirm dabei? False\nTyp von 'ist_sonnig': <class 'bool'>\n```\n:::\n:::\n\n\nBooleans werden besonders in **Bedingungen** und **Vergleichen** verwendet, was Sie in Kapitel 4 genauer kennenlernen.\n\n## Rechnen mit Zahlen\n\nPython kann wie ein Taschenrechner verwendet werden:\n\n| Operator | Beschreibung |\n| :--: | :--: |\n| `+`, `-` |  Addition / Subtraktion |\n| `*`, `/` | Multiplikation / Division |\n| `//`, `%` | Ganzzahlige Division / Rest | \n| `**`| Potenzieren |\n\n::: {#299274da .cell execution_count=4}\n``` {.python .cell-code}\na = 10\nb = 3\n\nprint(\"Addition:\", a + b)\nprint(\"Subtraktion:\", a - b)\nprint(\"Multiplikation:\", a * b)\nprint(\"Potenzieren\", a**b)\nprint(\"Division:\", a / b)\nprint(\"Ganzzahlige Division:\", a // b)\nprint(\"Division mit Rest:\", a % b)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAddition: 13\nSubtraktion: 7\nMultiplikation: 30\nPotenzieren 1000\nDivision: 3.3333333333333335\nGanzzahlige Division: 3\nDivision mit Rest: 1\n```\n:::\n:::\n\n\n::: {.callout-note collapse=\"false\"}\n`//` bedeutet: Ganzzahldivision, das Ergebnis wird abgerundet. Alternativ gibt es \nauch `%`. Hier wird eine Ganzzahldivision durchgeführt und der Rest ausgegeben.\n:::\n\n## Arbeiten mit Text\n\nTexte (Strings) können miteinander kombiniert werden:\n\n::: {#22499f09 .cell execution_count=5}\n``` {.python .cell-code}\nvorname = \"Anna\"\nnachname = \"Beispiel\"\nprint(\"Willkommen, \" + vorname + \" \" + nachname + \"!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWillkommen, Anna Beispiel!\n```\n:::\n:::\n\n\nWenn Sie Text und Zahlen kombinieren wollen, müssen Sie die Zahl in einen String umwandeln:\n\n::: {#3ecba7d1 .cell execution_count=6}\n``` {.python .cell-code}\npunkte = 95\nprint(\"Sie haben \" + str(punkte) + \" Punkte erreicht.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSie haben 95 Punkte erreicht.\n```\n:::\n:::\n\n\n## Umwandlung von Datentypen (Typecasting)\n\nManchmal müssen Sie einen Wert von einem Datentyp in einen anderen umwandeln – \nz. B. eine Zahl in einen Text (String), damit sie ausgegeben werden kann.\n\nDas nennt man **Typecasting**. Hier sind die wichtigsten Funktionen dafür:\n\n| Funktion | Beschreibung | Beispiel |\n|----------|--------------|----------|\n| `str())` | Zahl → Text | `str(42)` → `\"42\"` |\n| `int()` | Text/Zahl → ganze Zahl | `int(\"10\")` → `10` |\n| `float()` | Text/Zahl → Kommazahl | `float(\"3.14\")` → `3.14` |\n\n::: {#5d2bb23b .cell execution_count=7}\n``` {.python .cell-code}\n# Beispiel: Zahl als Text anzeigen\npunkte = 100\nprint(\"Sie haben \" + str(punkte) + \" Punkte.\")\n\n# Beispiel: String in Zahl umwandeln und berechnen\neingabe = \"3.5\"\nwert = float(eingabe) * 2\nprint(\"Doppelt so viel:\", wert)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSie haben 100 Punkte.\nDoppelt so viel: 7.0\n```\n:::\n:::\n\n\nAchten Sie beim Umwandeln darauf, dass der Inhalt auch wirklich passt – \n`int(\"abc\")` führt zu einem Fehler.\n\n\n::: {.callout-tip collapse=\"true\"}\n## Aufgabe: Alter in Tagen\n\nBerechnen Sie, wie alt eine Person in Tagen ist.\n\n::: {#ccdd5d8c .cell execution_count=8}\n``` {.python .cell-code}\nalter_jahre = 32\ntage = alter_jahre * 365\nprint(\"Sie sind ungefähr \" + str(tage) + \" Tage alt.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSie sind ungefähr 11680 Tage alt.\n```\n:::\n:::\n\n\nTipp: Denken Sie an die Umwandlung in einen String, wenn Sie die Zahl ausgeben möchten.\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n## Lösung\n\n::: {#17e3432a .cell execution_count=9}\n``` {.python .cell-code}\nalter = 32\ntage = alter * 365\nprint(\"Sie sind ungefähr \" + str(tage) + \" Tage alt.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSie sind ungefähr 11680 Tage alt.\n```\n:::\n:::\n\n\n:::\n:::\n\n",
    "supporting": [
      "datentypen_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}