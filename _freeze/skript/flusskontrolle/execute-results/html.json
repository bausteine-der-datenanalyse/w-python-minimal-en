{
  "hash": "27c3786c6ae68110aa1f3a2cd05060f9",
  "result": {
    "engine": "jupyter",
    "markdown": "# Entscheidungen und Wiederholungen\n\nProgramme müssen oft Entscheidungen treffen – zum Beispiel abhängig von einer Benutzereingabe oder einem bestimmten Wert. Ebenso müssen bestimmte Aktionen mehrfach durchgeführt werden.\n\nDafür gibt es zwei zentrale Elemente in Python:\n\n- **Kontrollstrukturen**: `if`, `elif`, `else`\n- **Schleifen**: `while` und `for`\n\n## Lernziele dieses Kapitels\n\nAm Ende dieses Kapitels können Sie:\n\n- Bedingungen formulieren und mit `if`, `elif`, `else` nutzen,\n- Vergleichsoperatoren verwenden (`==`, `<`, `!=`, …),\n- Wiederholungen mit `while` und `for` umsetzen.\n\n## Bedingungen mit `if`, `elif`, `else`\n\n::: {#f13c842f .cell execution_count=1}\n``` {.python .cell-code}\nalter = 17\n\nif alter >= 18:\n    print(\"Sie sind volljährig.\")\nelse:\n    print(\"Sie sind minderjährig.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSie sind minderjährig.\n```\n:::\n:::\n\n\nMehrere Fälle unterscheiden:\n\n::: {#2168368e .cell execution_count=2}\n``` {.python .cell-code}\nnote = 2.3\n\nif note <= 1.5:\n    print(\"Sehr gut\")\nelif note <= 2.5:\n    print(\"Gut\")\nelif note <= 3.5:\n    print(\"Befriedigend\")\nelse:\n    print(\"Ausreichend oder schlechter\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGut\n```\n:::\n:::\n\n\n## Vergleichsoperatoren\n\n| Ausdruck | Bedeutung |\n|----------|-----------|\n| `a == b` | gleich |\n| `a != b` | ungleich |\n| `a < b`  | kleiner als |\n| `a > b`  | größer als |\n| `a <= b` | kleiner oder gleich |\n| `a >= b` | größer oder gleich |\n\n## Wiederholungen mit `while`\n\n::: {#8999368e .cell execution_count=3}\n``` {.python .cell-code}\nzähler = 0\n\nwhile zähler < 5:\n    print(\"Zähler ist:\", zähler)\n    zähler += 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nZähler ist: 0\nZähler ist: 1\nZähler ist: 2\nZähler ist: 3\nZähler ist: 4\n```\n:::\n:::\n\n\n::: {.callout-important icon=\"false\" collapse=\"false\"}\nAchten Sie auf eine Abbruchbedingung – sonst läuft die Schleife endlos!\n:::\n\n## Schleifen mit `for` und `range()`\n\nWenn Sie eine Schleife **genau eine bestimmte Anzahl von Malen** durchlaufen möchten, nutzen Sie `for` mit `range()`:\n\n::: {#b28fcce2 .cell execution_count=4}\n``` {.python .cell-code}\nfor i in range(5):\n    print(\"Durchlauf:\", i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDurchlauf: 0\nDurchlauf: 1\nDurchlauf: 2\nDurchlauf: 3\nDurchlauf: 4\n```\n:::\n:::\n\n\nStart- und Endwert festlegen:\n\n::: {#03973490 .cell execution_count=5}\n``` {.python .cell-code}\nfor i in range(1, 6):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n4\n5\n```\n:::\n:::\n\n\n## Was macht `range()` genau?\n\nDie Funktion `range()` erzeugt eine Abfolge von Zahlen, über die Sie mit einer `for`-Schleife iterieren können.\n\n### Varianten:\n\n```python\nrange(5)\n```\n➡️ ergibt: `0, 1, 2, 3, 4` (startet bei 0, endet **vor** 5)\n\n```python\nrange(2, 6)\n```\n➡️ ergibt: `2, 3, 4, 5` (startet bei 2, endet **vor** 6)\n\n```python\nrange(1, 10, 2)\n```\n➡️ ergibt: `1, 3, 5, 7, 9` (Schrittweite = 2)\n\n`range()` erzeugt keine echte Liste, sondern ein sogenanntes „range-Objekt“, das wie eine Liste verwendet werden kann.\n\n::: {.callout-tip collapse=\"true\"}\n## ✏️ Aufgabe: Zähle von 1 bis 10\n\nNutzen Sie eine `for`-Schleife, um die Zahlen von 1 bis 10 auszugeben.\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n## Lösung\n\n::: {#1fd43a80 .cell execution_count=6}\n``` {.python .cell-code}\nfor i in range(1, 11):\n    print(i)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n```\n:::\n:::\n\n\n:::\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Aufgabe: Gerade Zahlen ausgeben\n\nGeben Sie alle geraden Zahlen von 0 bis 20 aus. Tipp: Eine Zahl ist gerade, wenn `zahl % 2 == 0`.\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n## Lösung\n\n::: {#8bd8c49a .cell execution_count=7}\n``` {.python .cell-code}\nfor zahl in range(0, 21):\n    if zahl % 2 == 0:\n        print(zahl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20\n```\n:::\n:::\n\n\n:::\n:::\n\n",
    "supporting": [
      "flusskontrolle_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}