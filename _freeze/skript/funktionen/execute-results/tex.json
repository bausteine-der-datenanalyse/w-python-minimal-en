{
  "hash": "9ef52b875ebd532c8ab4dfd96a526a09",
  "result": {
    "engine": "jupyter",
    "markdown": "# Wiederverwendbarer Code mit Funktionen\n\nStellen Sie sich vor, Sie müssen eine bestimmte Berechnung mehrfach im Programm durchführen. Anstatt den Code jedes Mal neu zu schreiben, können Sie ihn in einer **Funktion** bündeln.\n\nFunktionen sind ein zentrales Werkzeug, um Code:\n\n- übersichtlich,\n- wiederverwendbar und\n- testbar zu machen.\n\n## Lernziele dieses Kapitels\n\nAm Ende dieses Kapitels können Sie:\n\n- eigene Funktionen mit `def` erstellen,\n- Parameter übergeben und Rückgabewerte nutzen,\n- Funktionen sinnvoll in Programmen einsetzen.\n\n## Eine Funktion definieren\n\nEine Funktion besteht aus folgenden Teilen:\n\n1. **Definition** mit `def`\n2. **Funktionsname**\n3. **Parameter in Klammern (optional)**\n4. **Einrückung** für den Funktionskörper\n5. (optional) **`return`-Anweisung**\n\nBeispiel:\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\ndef hallo(name=\"Gast\"):\n    begruessung = \"Hallo \" + name + \"!\"\n    return begruessung\n```\n:::\n\n\nFangen wir mit dem ersten Stichwort an. Funktionen werden mit `def` definiert \nund können beliebig oft aufgerufen werden:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef begruessung():\n    print(\"Hallo und willkommen!\")\n```\n:::\n\n\nSie wird erst ausgeführt, wenn Sie sie aufrufen:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nbegruessung()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHallo und willkommen!\n```\n:::\n:::\n\n\n## Parameter übergeben\n\nFunktionen können Eingabewerte (Parameter) erhalten:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndef begruessung(name):\n    print(\"Hallo\", name + \"!\")\n\nbegruessung(\"Alex\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHallo Alex!\n```\n:::\n:::\n\n\n## Rückgabewerte mit `return`\n\nEine Funktion kann auch einen Wert **zurückgeben**:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndef quadrat(zahl):\n    return zahl * zahl\n\nergebnis = quadrat(5)\nprint(ergebnis)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n25\n```\n:::\n:::\n\n\n## Beispiel: Umrechnungen\n\n### Euro zu US-Dollar\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndef euro_zu_usd(betrag_euro):\n    wechselkurs = 1.09\n    return betrag_euro * wechselkurs\n\nprint(\"20 € sind\", euro_zu_usd(20), \"US-Dollar.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n20 € sind 21.8 US-Dollar.\n```\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Aufgabe: Begrüßung mit Name\n\nErstellen Sie eine Funktion `begruesse(name)`, die den Namen in einem Begrüßungstext verwendet:\n\n```text\nHallo Fatima, schön dich zu sehen!\n```\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n## Lösung\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndef begruesse(name):\n    print(\"Hallo\", name + \", schön dich zu sehen!\")\n\nbegruesse(\"Fatima\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHallo Fatima, schön dich zu sehen!\n```\n:::\n:::\n\n\n:::\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Aufgabe: Temperaturumrechnung\n\nSchreiben Sie eine Funktion, die Celsius in Fahrenheit umrechnet:\n\nFormel:\n\\[\nF = C \\times 1.8 + 32\n\\]\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n## Lösung\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndef celsius_zu_fahrenheit(c):\n    return c * 1.8 + 32\n\nprint(celsius_zu_fahrenheit(20))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n68.0\n```\n:::\n:::\n\n\n:::\n:::\n\n## Parameter mit Standardwerten\n\nSie können Parametern **Standardwerte** zuweisen. So kann die Funktion auch ohne \nAngabe eines Werts aufgerufen werden:\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndef begruessung(name=\"Gast\"):\n    print(\"Hallo\", name + \"!\")\n\nbegruessung()         # Hallo Gast!\nbegruessung(\"Maria\")  # Hallo Maria!\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHallo Gast!\nHallo Maria!\n```\n:::\n:::\n\n\n::: {.callout-note collapse=\"false\"}\n## `print()` vs. `return`\n\nDiese beiden Begriffe werden oft verwechselt:\n\n| Ausdruck | Bedeutung |\n|----------|-----------|\n| `print()` | zeigt einen Text auf dem Bildschirm |\n| `return ` | gibt einen Wert an den Aufrufer zurück |\n\nBeispiel:\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndef verdoppeln(x):\n    return x * 2\n\n# Ausgabe sichtbar machen\nprint(verdoppeln(5))  # Ausgabe: 10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n```\n:::\n:::\n\n\n:::\n\n",
    "supporting": [
      "funktionen_files/figure-pdf"
    ],
    "filters": []
  }
}