{
  "hash": "5eafbe27b285ab399df33eb70e42a7b2",
  "result": {
    "engine": "jupyter",
    "markdown": "# Arbeiten mit Dateien\n\nProgramme arbeiten oft nicht nur mit Benutzereingaben, sondern auch mit **Textdateien** – zum Beispiel um Daten zu speichern oder zu laden.\n\nPython bietet einfache Funktionen, um:\n\n- Dateien **zu öffnen**,\n- ihren **Inhalt zu lesen** oder **hineinzuschreiben**,\n- und die Datei **wieder zu schließen**.\n\n## Lernziele dieses Kapitels\n\nAm Ende dieses Kapitels können Sie:\n\n- Dateien mit `open()` öffnen,\n- Inhalte aus Textdateien einlesen,\n- Texte in Dateien schreiben,\n- mit `with`-Blöcken sicher und einfach arbeiten.\n\n## Eine Datei einlesen\n\n::: {#7fd83122 .cell execution_count=1}\n``` {.python .cell-code}\n# Beispiel: Datei lesen\nwith open(\"01-daten/beispiel.txt\", \"r\") as datei:\n    inhalt = datei.read()\n    print(inhalt)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDies ist ein Test.\n```\n:::\n:::\n\n\n- `\"r\"` steht für **read** (lesen).\n- `with` sorgt dafür, dass die Datei nach dem Lesen automatisch geschlossen wird.\n- `read()` liest den **gesamten Inhalt** der Datei als String.\n\n## Zeilenweise lesen\n\n::: {#c4d4b14a .cell execution_count=2}\n``` {.python .cell-code}\nwith open(\"01-daten/beispiel.txt\", \"r\") as datei:\n    for zeile in datei:\n        print(\"Zeile:\", zeile.strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nZeile: Dies ist ein Test.\n```\n:::\n:::\n\n\n::: {.callout-note collapse=\"false\"}\n`.strip()` entfernt Leerzeichen und Zeilenumbrüche am Anfang und Ende.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Aufgabe: Datei lesen\n\nAngenommen, es gibt eine Datei `gruesse.txt` mit folgendem Inhalt:\n\n```\nHallo Anna\nGuten Morgen Ben\nWillkommen Carla\n```\n\nSchreiben Sie ein Programm, das jede Zeile einzeln einliest und mit `print(...)` wiedergibt.\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n## Lösung\n\n::: {#49a6bfad .cell execution_count=3}\n``` {.python .cell-code}\nwith open(\"01-daten/gruesse.txt\", \"r\") as f:\n    for zeile in f:\n        print(zeile.strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHallo Anna\nGuten Morgen Ben\nWillkommen Carla\n```\n:::\n:::\n\n\n:::\n:::\n\n## In eine Datei schreiben\n\n::: {#0c7b0baa .cell execution_count=4}\n``` {.python .cell-code}\nwith open(\"ausgabe.txt\", \"w\") as datei:\n    datei.write(\"Das ist eine neue Zeile.\\n\")\n    datei.write(\"Und noch eine.\")\n```\n:::\n\n\n- `\"w\"` steht für **write** (schreiben).\n- Achtung: Eine vorhandene Datei wird **überschrieben**!\n\n## Zeilenweise schreiben mit Schleife\n\n::: {#6de4af50 .cell execution_count=5}\n``` {.python .cell-code}\ndaten = [\"Apfel\", \"Banane\", \"Kirsche\"]\n\nwith open(\"obst.txt\", \"w\") as f:\n    for eintrag in daten:\n        f.write(eintrag + \"\\n\")\n```\n:::\n\n\n::: {.callout-important collapse=\"false\"}\nJede Zeile endet mit `\\n` für einen Zeilenumbruch.\n:::\n\n::: {.callout-tip collapse=\"true\"}\n## Aufgabe: Liste in Datei schreiben\n\nGegeben ist eine Liste von Städten:\n\n```python\nstaedte = [\"Berlin\", \"Hamburg\", \"München\"]\n```\n\n- Schreiben Sie ein Programm, das jede Stadt in eine neue Zeile einer Datei `staedte.txt` schreibt.\n\n::: {.callout-caution icon=\"false\" collapse=\"true\"}\n## Lösung\n\n::: {#d15e728a .cell execution_count=6}\n``` {.python .cell-code}\nstaedte = [\"Berlin\", \"Hamburg\", \"München\"]\n\nwith open(\"staedte.txt\", \"w\") as f:\n    for stadt in staedte:\n        f.write(stadt + \"\\n\")\n```\n:::\n\n\n:::\n:::\n\n## Alle Zeilen auf einmal lesen mit `readlines()`\n\nStatt über eine Datei zu iterieren, können Sie alle Zeilen auf einmal als Liste einlesen:\n\n::: {#cc110339 .cell execution_count=7}\n``` {.python .cell-code}\nwith open(\"01-daten/beispiel.txt\", \"r\") as f:\n    zeilen = f.readlines()\n    print(zeilen)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['Dies ist ein Test.']\n```\n:::\n:::\n\n\n::: {.callout-important collapse=\"false\"}\nJede Zeile endet mit `\\n`, deshalb kann eine Nachbearbeitung mit `.strip()` sinnvoll sein:\n\n::: {#eff90aaf .cell execution_count=8}\n``` {.python .cell-code}\nfor zeile in zeilen:\n    print(zeile.strip())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDies ist ein Test.\n```\n:::\n:::\n\n\n:::\n\n## Dateien manuell schließen mit `close()`\n\nWenn Sie **keinen `with`-Block** verwenden, müssen Sie die Datei selbst schließen \n– sonst bleibt sie geöffnet:\n\n::: {#417e6fac .cell execution_count=9}\n``` {.python .cell-code}\ndatei = open(\"01-daten/beispiel.txt\", \"w\")\ndatei.write(\"Dies ist ein Test.\")\ndatei.close()\n```\n:::\n\n\n::: {.callout-important collapse=\"false\"}\n`close()` ist wichtig, damit Änderungen gespeichert werden und die Datei nicht \ngesperrt bleibt.\n\n**Empfehlung**: Nutzen Sie immer `with open(...)`, da Python die Datei dann \nautomatisch schließt – auch bei Fehlern.\n:::\n\n",
    "supporting": [
      "lesen_schreiben_files"
    ],
    "filters": [],
    "includes": {}
  }
}