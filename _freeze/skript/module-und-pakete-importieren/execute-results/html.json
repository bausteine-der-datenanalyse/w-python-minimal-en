{
  "hash": "b422c44c9034bba2d0bf7190bc952ed6",
  "result": {
    "engine": "jupyter",
    "markdown": "# Module und Pakete importieren\nDer Funktionsumfang von Python kann erheblich durch das Importieren von Modulen und Paketen erweitert werden. Module und Pakete sind Bibliotheken, die Funktionsdefinitionen enthalten.\n\n:::{#imp-module-und-pakete .callout-important}\n# Module und Pakete\n\nModule\n: Module sind Dateien, die Funktionsdefinitionen enthalten.\n: Module werden durch das Schlüsselwort `import` und ihren Namen importiert, bspw. `import glob`\n\nPakete\n: Pakete sind Sammlungen von Modulen\n: In Paketen enthaltene Module werden durch das Schlüsselwort `import` mit der Schreibeweise paket.modul importiert, bspw. `import matplotlib.pyplot`\n\n:::\n\nModule und Pakete werden mit dem Schlüsselwort `import` in Python geladen.\nBeispielsweise kann das für die Erzeugung (pseudo-)zufälliger Zahlen zuständige Modul random mit dem Befehl `import random` eingebunden werden. Anschließend stehen die Funktionen des Moduls unter dem Modulnamen in der Schreibweise `modul.funktion()` zur Verfügung.\n\n::: {#2606c1ee .cell execution_count=1}\n``` {.python .cell-code}\nimport random\n\nprint(random.randint(1, 10)) # Zufällige Ganzzahl zwischen 1 und 10\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n9\n```\n:::\n:::\n\n\nDas Paket Matplotlib bringt viele Funktionen zur grafischen Darstellung von Daten mit. Das Modul `matplotlib.pyplot` stellt eine Schnittstelle zu den enthaltenen Funktionen dar.\n\n::: {#de675161 .cell execution_count=2}\n``` {.python .cell-code}\nimport matplotlib.pyplot\n\nzufallsdaten = [] # leere Liste anlegen\nfor i in range(10):\n    zufallszahl = random.randint(1, 10)\n    zufallsdaten.append(zufallszahl)\n\nmatplotlib.pyplot.plot(zufallsdaten)\n```\n\n::: {.cell-output .cell-output-display}\n![Grafik mit dem Modul pyplot aus dem Paket matplotlib](module-und-pakete-importieren_files/figure-html/cell-3-output-1.png){width=558 height=411 fig-alt='Darstellung von zehn Zufallszahlen ohne inhaltliche Bedeutung'}\n:::\n:::\n\n\n&nbsp;\n\n:::{#wrn-fromimport .callout-warning appearance=\"simple\"}\n# Namensraum direkt einbinden\nIn Python ist es auch möglich, Funktionen direkt in den Namensraum von Python zu importieren, sodass diese ohne die Schreibweise `modul.funktion()` aufgerufen werden können. Dies ist mit dem Schlüsselwort `from` möglich.\n\n::: {#59412de2 .cell execution_count=3}\n``` {.python .cell-code}\nfrom random import randint\nprint(f\"Die Funktion randint steht nun direkt zur Verfügung: {randint(1, 100)}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDie Funktion randint steht nun direkt zur Verfügung: 70\n```\n:::\n:::\n\n\nDurch `from modulname import *` ist es sogar möglich, alle Funktionen aus einem Modul in den Namensraum von Python zu importieren. Im Allgemeinen sollte das direkte Importieren von Funktionen oder eines ganzen Moduls in den Namensraum von Python jedoch unterlassen werden. Einerseits wird damit eine Namensraumkollision riskiert, beispielsweise gibt es die Funktion `sum()` in der Pythonbasis, in NumPy und in Pandas. Andererseits wird der Programmcode dadurch weniger nachvollziehbar, da nicht mehr überall ersichtlich ist, aus welchem Modul eine verwendete Funktion stammt.\n:::\n\n## import as\nUm lange Modulnamen zu vereinfachen, kann beim Importieren das Schlüsselwort `as` verwendet werden, um dem Modul einen neuen Namen zuzuweisen.\n\n::: {#21eaf75b .cell execution_count=4}\n``` {.python .cell-code}\nimport matplotlib.pyplot as plt\n\nplt.plot(zufallsdaten)\n```\n\n::: {.cell-output .cell-output-display}\n![Grafik mit dem Modul pyplot aus dem Paket matplotlib](module-und-pakete-importieren_files/figure-html/cell-5-output-1.png){width=558 height=411 fig-alt='Darstellung von zehn Zufallszahlen ohne inhaltliche Bedeutung'}\n:::\n:::\n\n\n&nbsp;\n\nFür häufig verwendete Module haben sich bestimmte Kürzel etabliert. In den Bausteinen werden häufig die folgenden Pakete und Kürzel genutzt:\n\n| Modul | Kürzel | Befehl |\n|---|---|---|\n| NumPy | np | import numpy as np |\n| Pandas | pd | import pandas as pd |\n| matplotlib.pyplot | plt | import matplotlib.pyplot as plt |\n\n## Kleine Modulübersicht\nDa es nicht möglich ist, auf alle diese Module einzugehen, werden im folgenden nur einige wenige Module aufgelistet, welche für die Zielgruppe dieses Skripts interessant sein könnten. *Hinweis: Die Eigennamen einiger Module weisen eine Groß- und Kleinschreibung auf, bspw. das Modul NumPy. Beim Importieren der Module werden die Modulnamen jedoch klein geschrieben.* In der folgenden Liste wird auf die Groß- und Kleinschreibung daher verzichtet.\n\n* **math**: mathematische Funktionen und Konstanten\n* **scipy**: wissenschaftliche Funktionen\n* **sys**: Interaktion mit dem Python-Interpreter\n* **os**: Interaktion mit dem Betriebssystem\n* **glob**: Durchsuchen von Dateisystempfaden\n* **multiprocessing / threading**: Parallelprogramierung mit Prozessen / Threads\n* **matplotlib**: Visualisierung von Daten und Erstellen von Abbildungen\n* **numpy**: numerische Operationen und Funktionen\n* **pandas**: Daten einlesen und auswerten \n* **time**: Zeitfunktionen\n\n&nbsp;\n(@Arnold-2023-funktionen-module-dateien)\n\n",
    "supporting": [
      "module-und-pakete-importieren_files"
    ],
    "filters": [],
    "includes": {}
  }
}