# Understanding Data Types

## Learning Objectives of This Chapter

By the end of this chapter, you will be able to:

- distinguish the most important data types,
- work with numbers and text,
- perform simple calculations and print outputs.

## Introduction

Python has various **data types**. These describe **what kind of data** you store in variables. This is important because many operations—like `+`—can behave differently depending on the data type:

- `+` with numbers means **addition**,
- `+` with text means **concatenation** (joining together).

So before we move on to more complex programs, we should understand which data types exist and how to use them.

## The Most Important Data Types

Here are the basic data types in Python:

| Type | Example | Meaning |
|------|---------|---------|
| `int` | `10` | Integer (whole number) |
| `float` | `3.14` | Decimal number (floating point) |
| `str` | `"Hello"` | Text (string) |
| `bool` | `True`, `False` | Boolean (yes/no) |

You can check the type of a variable using the `type()` function:

```{python}
value = 42
print(type(value))  # Output: <class 'int'>
```

## Difference Between `int` and `float`

In Python, we distinguish between **integers** (`int`) and **floating point numbers** (`float`):

- `int` stands for “integer” – whole numbers like `1`, `0`, `-10`
- `float` stands for “floating point number” – numbers with decimal places like `3.14`, `0.5`, `-2.0`

```{python}
a = 10       # int
b = 2.5      # float

print("a:", a, "| Type:", type(a))
print("b:", b, "| Type:", type(b))
```

::: {.callout-important icon="false" collapse="false"}
This distinction is important: some operations behave slightly differently depending on the data type.
:::

## What Are Booleans (`bool`)?

A **Boolean** is a truth value: it can only have two possible states:

- `True`
- `False`

These values show up in situations like:

- Is the temperature above 30 °C?
- Does the file have a certain name?
- Is the list empty?

```{python}
is_sunny = True
has_umbrella = False

print("Sunny:", is_sunny)
print("Has umbrella?", has_umbrella)
print("Type of 'is_sunny':", type(is_sunny))
```

Booleans are especially useful in **conditions** and **comparisons**, which you will learn more about in Chapter 4.

## Doing Math with Numbers

Python can be used like a calculator:

| Operator | Description |
|:--------:|:-----------:|
| `+`, `-` | Addition / Subtraction |
| `*`, `/` | Multiplication / Division |
| `//`, `%` | Integer Division / Remainder |
| `**` | Exponentiation |

```{python}
a = 10
b = 3

print("Addition:", a + b)
print("Subtraction:", a - b)
print("Multiplication:", a * b)
print("Exponentiation:", a**b)
print("Division:", a / b)
print("Integer Division:", a // b)
print("Remainder:", a % b)
```

::: {.callout-note collapse="false"}
`//` means integer division: the result is rounded down. Alternatively, `%` performs integer division and returns the remainder.
:::

## Working with Text

Text (strings) can be combined:

```{python}
first_name = "Anna"
last_name = "Example"
print("Welcome, " + first_name + " " + last_name + "!")
```

If you want to combine text and numbers, you must convert the number to a string:

```{python}
points = 95
print("You scored " + str(points) + " points.")
```

## Type Conversion (Typecasting)

Sometimes you need to convert a value from one data type to another—
e.g., a number to a string so it can be printed.

This is called **typecasting**. Here are the most common functions:

| Function | Description | Example |
|----------|-------------|---------|
| `str()` | Number → Text | `str(42)` → `"42"` |
| `int()` | Text/number → Integer | `int("10")` → `10` |
| `float()` | Text/number → Float | `float("3.14")` → `3.14` |

```{python}
# Example: display a number as text
points = 100
print("You scored " + str(points) + " points.")

# Example: convert string to number and do a calculation
input_value = "3.5"
value = float(input_value) * 2
print("Double the value:", value)
```

When converting, make sure the content is appropriate – 
`int("abc")` will cause an error.


::: {.callout-tip collapse="true"}
## Exercise: Age in Days

Calculate how old a person is in days.

```{python}
age_years = 32
days = age_years * 365
print("You are approximately " + str(days) + " days old.")
```

Tip: Remember to convert the number to a string when printing it.

::: {.callout-caution icon="false" collapse="true"}
## Solution
```{python}
age = 32
days = age * 365
print("You are approximately " + str(days) + " days old.")
```
:::
:::
