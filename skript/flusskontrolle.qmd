# Decisions and Loops

Programs often need to make decisions – for example, based on user input or a specific value. Similarly, certain actions need to be repeated multiple times.

Python provides two key elements for this:

- **Control structures**: `if`, `elif`, `else`
- **Loops**: `while` and `for`

## Learning Objectives of This Chapter

By the end of this chapter, you will be able to:

- Formulate conditions using `if`, `elif`, and `else`,
- Use comparison operators (`==`, `<`, `!=`, …),
- Implement loops with `while` and `for`.

## Conditions with `if`, `elif`, `else`

```{python}
age = 17

if age >= 18:
    print("You are an adult.")
else:
    print("You are a minor.")
```

Handling multiple cases:

```{python}
grade = 2.3

if grade <= 1.5:
    print("Very good")
elif grade <= 2.5:
    print("Good")
elif grade <= 3.5:
    print("Satisfactory")
else:
    print("Sufficient or worse")
```

## Comparison Operators

| Expression | Meaning             |
|------------|---------------------|
| `a == b`   | equal               |
| `a != b`   | not equal           |
| `a < b`    | less than           |
| `a > b`    | greater than        |
| `a <= b`   | less than or equal  |
| `a >= b`   | greater than or equal |

## Repetitions with `while`

```{python}
counter = 0

while counter < 5:
    print("Counter is:", counter)
    counter += 1
```

::: {.callout-important icon="false" collapse="false"}
Make sure to include a stopping condition – otherwise, the loop will run endlessly!
:::

## Loops with `for` and `range()`

If you want to repeat something **a specific number of times**, use `for` with `range()`:

```{python}
for i in range(5):
    print("Iteration:", i)
```

Set a custom start and end value:

```{python}
for i in range(1, 6):
    print(i)
```

## What exactly does `range()` do?

The `range()` function creates a sequence of numbers that can be iterated over with a `for` loop.

### Variants:

```python
range(5)
```
➡️ yields: `0, 1, 2, 3, 4` (starts at 0, ends **before** 5)

```python
range(2, 6)
```
➡️ yields: `2, 3, 4, 5` (starts at 2, ends **before** 6)

```python
range(1, 10, 2)
```
➡️ yields: `1, 3, 5, 7, 9` (step size = 2)

`range()` does not create a real list, but a so-called “range object” that behaves like a list.

::: {.callout-tip collapse="true"}
## ✏️ Task: Count from 1 to 10

Use a `for` loop to print the numbers from 1 to 10.

::: {.callout-caution icon="false" collapse="true"}
## Solution
```{python}
for i in range(1, 11):
    print(i)
```
:::
:::

::: {.callout-tip collapse="true"}
## Task: Print even numbers

Print all even numbers from 0 to 20. Tip: A number is even if `number % 2 == 0`.

::: {.callout-caution icon="false" collapse="true"}
## Solution
```{python}
for number in range(0, 21):
    if number % 2 == 0:
        print(number)
```
:::
:::
