# Wiederverwendbarer Code mit Funktionen

Stellen Sie sich vor, Sie müssen eine bestimmte Berechnung mehrfach im Programm durchführen. Anstatt den Code jedes Mal neu zu schreiben, können Sie ihn in einer **Funktion** bündeln.

Funktionen sind ein zentrales Werkzeug, um Code:

- übersichtlich,
- wiederverwendbar und
- testbar zu machen.

## Lernziele dieses Kapitels

Am Ende dieses Kapitels können Sie:

- eigene Funktionen mit `def` erstellen,
- Parameter übergeben und Rückgabewerte nutzen,
- Funktionen sinnvoll in Programmen einsetzen.

## Eine Funktion definieren

Eine Funktion besteht aus folgenden Teilen:

1. **Definition** mit `def`
2. **Funktionsname**
3. **Parameter in Klammern (optional)**
4. **Einrückung** für den Funktionskörper
5. (optional) **`return`-Anweisung**

Beispiel:

```{python}
def hallo(name="Gast"):
    begruessung = "Hallo " + name + "!"
    return begruessung
```


Fangen wir mit dem ersten Stichwort an. Funktionen werden mit `def` definiert 
und können beliebig oft aufgerufen werden:

```{python}
def begruessung():
    print("Hallo und willkommen!")
```

Sie wird erst ausgeführt, wenn Sie sie aufrufen:

```{python}
begruessung()
```

## Parameter übergeben

Funktionen können Eingabewerte (Parameter) erhalten:

```{python}
def begruessung(name):
    print("Hallo", name + "!")

begruessung("Alex")
```

## Rückgabewerte mit `return`

Eine Funktion kann auch einen Wert **zurückgeben**:

```{python}
def quadrat(zahl):
    return zahl * zahl

ergebnis = quadrat(5)
print(ergebnis)
```

## Beispiel: Umrechnungen

### Euro zu US-Dollar

```{python}
def euro_zu_usd(betrag_euro):
    wechselkurs = 1.09
    return betrag_euro * wechselkurs

print("20 € sind", euro_zu_usd(20), "US-Dollar.")
```

::: {.callout-tip collapse="true"}
## Aufgabe: Begrüßung mit Name

Erstellen Sie eine Funktion `begruesse(name)`, die den Namen in einem Begrüßungstext verwendet:

```text
Hallo Fatima, schön dich zu sehen!
```

::: {.callout-caution icon="false" collapse="true"}
## Lösung
```{python}
def begruesse(name):
    print("Hallo", name + ", schön dich zu sehen!")

begruesse("Fatima")
```
:::
:::

::: {.callout-tip collapse="true"}
## Aufgabe: Temperaturumrechnung

Schreiben Sie eine Funktion, die Celsius in Fahrenheit umrechnet:

Formel:
\[
F = C \times 1.8 + 32
\]

::: {.callout-caution icon="false" collapse="true"}
## Lösung
```{python}
def celsius_zu_fahrenheit(c):
    return c * 1.8 + 32

print(celsius_zu_fahrenheit(20))
```
:::
:::

## Parameter mit Standardwerten

Sie können Parametern **Standardwerte** zuweisen. So kann die Funktion auch ohne 
Angabe eines Werts aufgerufen werden:

```{python}
def begruessung(name="Gast"):
    print("Hallo", name + "!")

begruessung()         # Hallo Gast!
begruessung("Maria")  # Hallo Maria!
```

::: {.callout-note collapse="false"}
## `print()` vs. `return`

Diese beiden Begriffe werden oft verwechselt:

| Ausdruck | Bedeutung |
|----------|-----------|
| `print()` | zeigt einen Text auf dem Bildschirm |
| `return ` | gibt einen Wert an den Aufrufer zurück |

Beispiel:

```{python}
def verdoppeln(x):
    return x * 2

# Ausgabe sichtbar machen
print(verdoppeln(5))  # Ausgabe: 10
```
:::
