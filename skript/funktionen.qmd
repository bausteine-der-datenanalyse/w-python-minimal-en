# Reusable Code with Functions

Imagine you need to perform a specific calculation multiple times in your program. Instead of writing the same code repeatedly, you can bundle it into a **function**.

Functions are a key tool to make code:

- clear,
- reusable, and
- testable.

## Learning Goals of This Chapter

By the end of this chapter, you will be able to:

- create your own functions using `def`,
- pass parameters and use return values,
- apply functions effectively in programs.

## Defining a Function

A function consists of the following parts:

1. **Definition** with `def`
2. **Function name**
3. **Parameters in parentheses (optional)**
4. **Indentation** for the function body
5. (optional) **`return` statement**

Example:

```{python}
def hello(name="Guest"):
    greeting = "Hello " + name + "!"
    return greeting
```

Let’s start with the first keyword. Functions are defined with `def` 
and can be called as often as you like:

```{python}
def greeting():
    print("Hello and welcome!")
```

It only runs when you call it:

```{python}
greeting()
```

## Passing Parameters

Functions can receive input values (parameters):

```{python}
def greeting(name):
    print("Hello", name + "!")

greeting("Alex")
```

## Return Values with `return`

A function can also **return** a value:

```{python}
def square(number):
    return number * number

result = square(5)
print(result)
```

## Example: Conversions

### Euro to US Dollar

```{python}
def euro_to_usd(amount_euro):
    exchange_rate = 1.09
    return amount_euro * exchange_rate

print("20 € is", euro_to_usd(20), "US dollars.")
```

::: {.callout-tip collapse="true"}
## Task: Greeting with Name

Create a function `greet(name)` that uses the name in a greeting text:

```text
Hello Fatima, nice to see you!
```

::: {.callout-caution icon="false" collapse="true"}
## Solution
```{python}
def greet(name):
    print("Hello", name + ", nice to see you!")

greet("Fatima")
```
:::
:::

::: {.callout-tip collapse="true"}
## Task: Temperature Conversion

Write a function that converts Celsius to Fahrenheit:

Formula:
\[
F = C \times 1.8 + 32
\]

::: {.callout-caution icon="false" collapse="true"}
## Solution
```{python}
def celsius_to_fahrenheit(c):
    return c * 1.8 + 32

print(celsius_to_fahrenheit(20))
```
:::
:::

## Parameters with Default Values

You can assign **default values** to parameters. That way, the function can be called even without providing a value:

```{python}
def greeting(name="Guest"):
    print("Hello", name + "!")

greeting()         # Hello Guest!
greeting("Maria")  # Hello Maria!
```

::: {.callout-note collapse="false"}
## `print()` vs. `return`

These two concepts are often confused:

| Expression | Meaning |
|------------|---------|
| `print()`  | displays text on the screen |
| `return`   | gives a value back to the caller |

Example:

```{python}
def double(x):
    return x * 2

# Make the output visible
print(double(5))  # Output: 10
```
:::
