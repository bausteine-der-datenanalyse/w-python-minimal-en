# Working with Files

Programs often work not only with user input but also with **text files** – for example, to save or load data.

Python offers simple functions to:

- **open** files,
- **read from** or **write to** them,
- and **close** them afterward.

## Learning Goals of This Chapter

By the end of this chapter, you will be able to:

- open files using `open()`,
- read content from text files,
- write text into files,
- work safely and easily using `with` blocks.

## Reading a File

```{python}
# Example: Reading a file
with open("01-daten/beispiel.txt", "r") as file:
    content = file.read()
    print(content)
```

- `"r"` stands for **read**.
- `with` ensures that the file is automatically closed after reading.
- `read()` reads the **entire content** of the file as a string.

## Reading Line by Line

```{python}
with open("01-daten/beispiel.txt", "r") as file:
    for line in file:
        print("Line:", line.strip())
```

::: {.callout-note collapse="false"}
`.strip()` removes whitespace and line breaks at the beginning and end.
:::

::: {.callout-tip collapse="true"}
## Task: Read a File

Suppose there is a file `gruesse.txt` with the following content:

```
Hallo Anna
Guten Morgen Ben
Willkommen Carla
```

Write a program that reads each line one by one and outputs it using `print(...)`.

::: {.callout-caution icon="false" collapse="true"}
## Solution
```{python}
with open("01-daten/gruesse.txt", "r") as f:
    for line in f:
        print(line.strip())
```
:::
:::

## Writing to a File

```{python}
with open("ausgabe.txt", "w") as file:
    file.write("This is a new line.\n")
    file.write("And another one.")
```

- `"w"` stands for **write**.
- Caution: An existing file will be **overwritten**!

## Writing Line by Line Using a Loop

```{python}
data = ["Apple", "Banana", "Cherry"]

with open("obst.txt", "w") as f:
    for entry in data:
        f.write(entry + "\n")
```

::: {.callout-important collapse="false"}
Each line ends with `\n` for a line break.
:::

::: {.callout-tip collapse="true"}
## Task: Write a List to a File

Given a list of cities:

```python
cities = ["Berlin", "Hamburg", "Munich"]
```

- Write a program that writes each city to a new line in a file called `cities.txt`.

::: {.callout-caution icon="false" collapse="true"}
## Solution
```{python}
cities = ["Berlin", "Hamburg", "Munich"]

with open("cities.txt", "w") as f:
    for city in cities:
        f.write(city + "\n")
```
:::
:::

## Reading All Lines at Once with `readlines()`

Instead of iterating over a file, you can read all lines at once as a list:

```{python}
with open("01-daten/beispiel.txt", "r") as f:
    lines = f.readlines()
    print(lines)
```

::: {.callout-important collapse="false"}
Each line ends with `\n`, so post-processing with `.strip()` is often helpful:

```{python}
for line in lines:
    print(line.strip())
```
:::

## Closing Files Manually with `close()`

If you **do not use a `with` block**, you must close the file yourself –
otherwise it stays open:

```{python}
file = open("01-daten/beispiel.txt", "w")
file.write("This is a test.")
file.close()
```

::: {.callout-important collapse="false"}
`close()` is important to ensure changes are saved and the file is not locked.

**Recommendation**: Always use `with open(...)`, because Python will automatically close the file – even if an error occurs.
:::
