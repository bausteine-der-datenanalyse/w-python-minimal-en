# Storing Multiple Values

Until now, you've stored individual values in variables. But what if you want to store a whole list of numbers, names, or values at once?

For that, Python has **lists**. In this chapter, you'll also learn how to iterate over lists using `for` loops.

## What is a List?

A list is an ordered collection of values of the same data type.

```{python}
names = ["Ali", "Bente", "Carlos"]
grades = [1.7, 2.3, 1.3, 2.0]
```

You access elements using square brackets:

```{python}
print(names[0])   # first element
print(grades[-1]) # last element
```

## Slicing Lists

With **slicing**, you can extract specific parts of a list.
You specify **where the slice starts and where it ends** (the end value is **not** included):

```{python}
numbers = [10, 20, 30, 40, 50, 60]
print(numbers[1:4])  # Output: [20, 30, 40]
```

### Syntax: `list[start:stop]`

- **start**: index where slicing starts (inclusive)
- **stop**: index where it ends (exclusive)
- You can omit the start index: `[:3]` → first to third element
- Or omit the stop index: `[3:]` → from fourth element to end
- Full copy: `[:]`

```{python}
print(numbers[:3])   # [10, 20, 30]
print(numbers[3:])   # [40, 50, 60]
print(numbers[:])    # full copy
```

::: {.callout-note icon="false" collapse="false"}
You can also use negative indices (`-1` is the last element):
```{python}
print(numbers[-3:])  # [40, 50, 60]
```
:::

## Iterating Over Lists

You can use a `for` loop to iterate over each element in a list:

```{python}
names = ["Ali", "Bente", "Carlos"]

for name in names:
    print("Hello", name + "!")
```

## Extension: Conditional Output

You can use `if` statements inside the loop to filter:

```{python}
temperatures = [14.2, 17.5, 19.0, 21.3, 18.4]

for t in temperatures:
    if t > 18:
        print(t, "is a warm day")
```

## Calculating the Average

Python provides useful functions such as `sum()` and `len()`:

```{python}
grades = [1.7, 2.3, 1.3, 2.0]

average = sum(grades) / len(grades)
print("Average grade:", round(average, 2))
```

## Expanding Lists: `.append()`

Sometimes you don’t know the list elements beforehand — you can **add new values later**:

```{python}
names = []

names.append("Ali")
names.append("Bente")

print(names)
```

::: {.callout-note icon="false" collapse="false"}
The `.append()` method adds a new value to the end of the list.
:::

## Nested Loops

If you're working with **multidimensional data** — such as a table with several rows — you can **nest loops**:

```{python}
weekdays = ["Mon", "Tue", "Wed"]
hours = [1, 2, 3]

for day in weekdays:
    for hour in hours:
        print(f"{day}, hour {hour}")
```

This results in:

```
Mon, hour 1
Mon, hour 2
Mon, hour 3
Tue, hour 1
...
```

## Sorting Lists

With `sorted()`, you can sort lists **alphabetically or numerically**:

```{python}
names = ["Zoe", "Anna", "Ben"]
sorted_names = sorted(names)

print(sorted_names)
```

::: {.callout-important icon="false" collapse="false"}
The original list remains **unchanged**.  
If you want to modify the list directly, you can use:
```{python}
names.sort()
```
:::
