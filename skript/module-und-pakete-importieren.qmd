# Importing Modules and Packages
Python’s functionality can be greatly extended by importing modules and packages. Modules and packages are libraries that contain function definitions.

:::{#imp-module-und-pakete .callout-important}
# Modules and Packages

Modules
: Modules are files that contain function definitions.
: Modules are imported using the `import` keyword and their name, e.g., `import glob`

Packages
: Packages are collections of modules.
: Modules within packages are imported using the syntax `package.module` with the `import` keyword, e.g., `import matplotlib.pyplot`
:::

Modules and packages are loaded in Python using the `import` keyword.  
For example, the module `random`, responsible for generating (pseudo-)random numbers, can be imported using `import random`.  
The module’s functions can then be accessed using the syntax `module.function()`.

```{python}
import random

print(random.randint(1, 10))  # Random integer between 1 and 10
```

The package Matplotlib provides many functions for visualizing data.  
The module `matplotlib.pyplot` serves as an interface to these functions.

```{python}
#| fig-cap: Graphic using the pyplot module from the matplotlib package
#| fig-alt: "Display of ten random numbers without any meaningful context"

import matplotlib.pyplot

random_data = []  # create an empty list
for i in range(10):
    rand_num = random.randint(1, 10)
    random_data.append(rand_num)

matplotlib.pyplot.plot(random_data)
```

&nbsp;

:::{#wrn-fromimport .callout-warning appearance="simple"}
# Importing into the Namespace
In Python, it is also possible to import functions directly into the namespace, so they can be used without the `module.function()` syntax. This is done with the `from` keyword.

```{python}
from random import randint
print(f"The function randint is now directly available: {randint(1, 100)}")
```

Using `from modulename import *` even allows importing all functions from a module into the namespace.  
However, this practice is generally discouraged:  
It can lead to name collisions — for example, the `sum()` function exists in Python, NumPy, and Pandas.  
Also, it reduces code readability, as it’s no longer clear which module a function belongs to.
:::

## import as
To shorten long module names, the `as` keyword can be used to assign an alias when importing.

```{python}
#| fig-cap: Graphic using the pyplot module from the matplotlib package
#| fig-alt: "Display of ten random numbers without any meaningful context"

import matplotlib.pyplot as plt

plt.plot(random_data)
```

&nbsp;

Certain abbreviations have become common for frequently used modules. The following are regularly used in this material:

| Module | Abbreviation | Command |
|--------|--------------|---------|
| NumPy | np | import numpy as np |
| Pandas | pd | import pandas as pd |
| matplotlib.pyplot | plt | import matplotlib.pyplot as plt |

## Brief Module Overview
Since it’s not feasible to cover all modules, here’s a brief list of some that may be relevant to the target audience.  
*Note: Some module names are capitalized (e.g., NumPy), but they are always lowercase when imported.*

* **math**: mathematical functions and constants  
* **scipy**: scientific functions  
* **sys**: interact with the Python interpreter  
* **os**: interact with the operating system  
* **glob**: search filesystem paths  
* **multiprocessing / threading**: parallel programming with processes / threads  
* **matplotlib**: data visualization and plot creation  
* **numpy**: numerical operations and functions  
* **pandas**: data reading and analysis  
* **time**: time-related functions  

&nbsp;  
(@Arnold-2023-funktionen-module-dateien)
